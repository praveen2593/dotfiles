"Vundle Settings
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" "call vundle#begin('~/some/path/here')
"
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
"
" This plugin allows you to add characters, around the word. Like if you want
" to add quotes, or brackets.
Plugin 'tpope/vim-surround'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"
" Plugin to help switch between tmux panes when in vim
Plugin 'christoomey/vim-tmux-navigator'
"
" Plugin for auto-pep8
Plugin 'w0rp/ale'
Plugin 'scrooloose/syntastic'

" Plugin for markdown rendering
Plugin 'JamshedVesuna/vim-markdown-preview'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just:PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line



let mapleader="\<Space>"

"General settings
    "Stop writing stuff
    set nobackup
    set nowritebackup
    set noswapfile
    "Line numbers
    set number
    set numberwidth=6
    set relativenumber
    "Searching
    set smartcase
    set ignorecase
    set gdefault
    set hlsearch
    set incsearch
    "Indenting
    set autoindent
    set smarttab
    set expandtab
    "Wildmenu
    set wildmenu
    set wildignore+=.git
    set wildmode=longest:list,full
    "Bottom
    set noruler
    set scrolloff=5
    set laststatus=2
    set statusline=%<\ %f\ %m%y%=%-35.(Line:\ %l\ of\ %L,\ Col:\ %c%V\ (%P)%)
    "Misc
    set path=**
    set linebreak
    set splitbelow
    set cursorline
    set hidden
    set visualbell
    set nocompatible
    set spelllang=en_us
    set backspace=indent,eol,start
    autocmd FileType python,sql,javascript,markdown
        \ set colorcolumn=79
    "Pasting in Vin
    nnoremap <F2> :set invpaste paste?<CR>
    set pastetoggle=<F2>
    set showmode

"Colors
syntax enable


"Filetype settings
filetype on
filetype plugin indent on
autocmd FileType python,text,html,css,javascript,vim
    \ setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType haskell,cabal,yaml,sh,sql,tex,markdown
    \ setlocal tabstop=2 shiftwidth=2 softtabstop=2

"Plugin settings
    "Syntatic
    let g:syntastic_enable_signs=0
    let g:syntastic_check_on_open=1
    let g:syntastic_check_on_wq=0
    let g:syntastic_python_checkers=['pyflakes']
    let g:syntastic_haskell_checkers=['hlint']

    "Netrw
    let g:netrw_banner=0
    let g:netrw_liststyle=3
    let g:netrw_browse_split=2
    let g:netrw_winsize = 15

    "Ale - Plugin for pep8 (copied from Jon Nalley - github username -
    "jnalley)
    let g:ale_lint_on_enter = 1
    let g:ale_lint_on_text_changed = 1
    let g:ale_lint_on_insert_leave = 1
    let g:ale_lint_on_filetype_changed = 0
    let g:ale_open_list = 0
    let g:ale_sign_error = "✗"
    let g:ale_sign_warning = "⚠"
    let g:ale_completion_enabled = 0
    " navigation
    let g:ale_fixers = {'python': ['autopep8', 'black', 'isort']}
    let g:ale_python_black_options = '--line-length 79'
    let g:ale_sh_shfmt_options = '-i 2 -ci'

"Mappings
    "Productivity
    nnoremap     j     gj
    nnoremap    pp    <F2>
    nnoremap     k     gk
    inoremap    jj    <ESC>
    vnoremap    vj    <ESC>
    nnoremap    ga    ggVG
    nnoremap    gl   :find <C-R><C-W>
    vnoremap    //    y/<C-R>"<CR>
    nnoremap <leader>Q :q!<CR>
    nnoremap <leader>f :find<Space>
    nnoremap <leader>e :edit<Space>
    vnoremap <leader>a :norm<Space>A
    nnoremap <leader>a :%norm<Space>A
    nnoremap <leader>u <C-R>
    nnoremap <leader>v V`]
    nnoremap <silent> <leader>t :Explore<CR>
    nnoremap <silent> <leader>T :Rexplore<CR>
    nnoremap <silent> <leader>o :noh<CR>
    nnoremap <silent> <leader>w :call TrimWhitespace()<CR>
    nnoremap <silent> <leader>c :call ToggleCursorLines()<CR>
    nnoremap <silent> <leader>n :set relativenumber!<CR>

    "Spell checking
    nnoremap <silent> <leader>sc :set spell!<CR>
    nnoremap <silent> <leader>ss z=
    nnoremap <silent> <leader>sa 1z=

    "Buffers
    nnoremap   <Tab>  :bnext<CR>
    nnoremap <S-Tab>  :bprevious<CR>
    nnoremap <leader>b :ls<CR>:buffer<Space>
    nnoremap <silent> <leader>x :bdelete<CR>

    "Swaps
    nnoremap    v    <C-V>
    nnoremap  <C-V>    v
    nnoremap    '      `
    nnoremap    `      '

    "Splits
    nnoremap <silent> <leader>s= :resize +5<CR>
    nnoremap <silent> <leader>s- :resize -5<CR>

    "Runners
    nnoremap <silent> <leader>rp :! python %<CR>
    nnoremap <silent> <leader>rh :! stack runghc %<CR>
    nnoremap <silent> <leader>rt :! pdflatex -shell-escape %<CR>

    "Clipboard
    nnoremap <silent> <leader>y :<C-u>exec 'normal ' . v:count1 . '"+yy'<CR>
    vnoremap <silent> <leader>y "+y
    nnoremap <silent> <leader>p :<C-u>exec 'normal ' . v:count1 . '"+p'<CR>
    nnoremap <silent> <leader>P :<C-u>exec 'normal ' . v:count1 . '"+P'<CR>
    vnoremap <silent> <leader>p "+p
    nnoremap <silent> <leader>d :<C-u>exec 'normal ' . v:count1 . '"+dd'<CR>
    vnoremap <silent> <leader>d "+d

    "Fugitive
    nnoremap <silent> <leader>gs :Gstatus<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>ga :Gwrite<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gd :Gdiff<CR>
    nnoremap <silent> <leader>gp :Git push<CR>

    "Ale
    nnoremap <silent> <leader><F7> :<Plug>(ale_lint)
    nnoremap <silent> <leader>ls :ALEDetail 
    nmap <silent> <leader>ee <Plug>(ale_lint)
    nmap <silent> <leader>ff <Plug>(ale_fix)

    "Markdown Preview
    let vim_markdown_preview_github=1
    let vim_markdown_preview_browser='Google Chrome'
    let vim_markdown_preview_hotkey='<silent> <leader>rh'

    "No arrow keys
    nnoremap   <up>   <nop>
    nnoremap  <down>  <nop>
    nnoremap  <left>  <nop>
    nnoremap  <right> <nop>
    inoremap   <up>   <nop>
    inoremap  <down>  <nop>
    inoremap  <left>  <nop>
    inoremap  <right> <nop>

"Other
    "Commands
    command -nargs=1 Vsb call VerticalSplitBuffer(<f-args>)

    "Functions
    function! VerticalSplitBuffer(buffer)
        execute 'vert sb' a:buffer 
    endfunction

    function! TrimWhitespace()
        let l:save_cursor = getpos('.')
        %s/\s\+$//e
        call setpos('.', l:save_cursor)
    endfunction

    function! ToggleCursorLines()
        if &cursorline && &cursorcolumn
            hi  clear CursorLine
            set nocursorcolumn
        else
            hi  CursorLine   ctermbg=236
            set cursorline
            set cursorcolumn
        endif
    endfunction

au FileType py, md set textwidth=79 

